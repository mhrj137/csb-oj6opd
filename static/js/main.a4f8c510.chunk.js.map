{"version":3,"sources":["SelectLanguage.js","Text.js","Download.js","ImportScript.js","Screenplay.js","App.js","index.js"],"names":["RegionalLanguageSelector","setSelectedLanguage","selectedLanguage","value","onChange","e","target","name","code","map","language","SpeechToText","setText","start","lang","text","useState","transcription","recognition","useRef","useEffect","window","rec","current","webkitSpeechRecognition","continuous","interimResults","grammarList","SpeechGrammarList","webkitSpeechGrammarList","addFromString","grammars","onresult","event","i","resultIndex","results","length","transcript","isFinal","stop","console","log","Download","fileName","setFileName","placeholder","ev","onClick","blob","Blob","type","saveAs","ImportScript","file","setFile","formatScreenplay","files","reader","FileReader","onloadend","result","readAsText","Screenplay","importedScreenPlay","setImportedScreenPlay","title","scenes","screenplay","setScreenplay","heading","action","characters","dialogue","parenthetical","currentScene","setCurrentScene","currentSceneText","setCurrentSceneText","currentAttribute","setCurrentAttribute","currentText","setCurrentText","setStart","handleAddAttribute","attribute","handleSubmit","includes","toUpperCase","formattedText","forEach","scene","repeat","character","formattedScreenplay","useMemo","Text","ct","className","Object","keys","newScreenplay","push","handleAddScene","JSON","stringify","rows","App","SelectLanguage","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.a4f8c510.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst RegionalLanguageSelector = ({\n  setSelectedLanguage,\n  selectedLanguage\n}) => {\n  const languages = [\n    { name: \"English\", code: \"en\" },\n    { name: \"Hindi\", code: \"hi\" },\n    { name: \"Bengali\", code: \"bn\" },\n    { name: \"Telugu\", code: \"te\" },\n    { name: \"Marathi\", code: \"mr\" },\n    { name: \"Tamil\", code: \"ta\" },\n    { name: \"Gujarati\", code: \"gu\" },\n    { name: \"Urdu\", code: \"ur\" },\n    { name: \"Punjabi\", code: \"pa\" },\n    { name: \"Kannada\", code: \"kn\" },\n    { name: \"Oriya\", code: \"or\" },\n    { name: \"Assamese\", code: \"as\" },\n    { name: \"Malayalam\", code: \"ml\" },\n    { name: \"Sanskrit\", code: \"sa\" },\n    { name: \"Konkani\", code: \"kok\" }\n  ];\n\n  return (\n    <div>\n      <h3>Select a Regional Language of India</h3>\n      <select\n        value={selectedLanguage}\n        onChange={(e) => setSelectedLanguage(e.target.value)}\n      >\n        {languages.map((language) => (\n          <option key={language.code} value={language.code}>\n            {language.name}\n          </option>\n        ))}\n      </select>\n      {selectedLanguage && <p>You have selected: {selectedLanguage}</p>}\n    </div>\n  );\n};\n\nexport default RegionalLanguageSelector;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nconst SpeechToText = ({ setText, start, text, lang }) => {\n  const [transcription, setTranscription] = useState(\"\");\n  let recognition = useRef(null);\n\n  useEffect(() => {\n    if (!(\"webkitSpeechRecognition\" in window)) {\n      console.log(\n        \"Your browser doesn't support speech recognition or the SpeechGrammarList.\"\n      );\n      return;\n    }\n    let rec = recognition.current;\n    rec = new window.webkitSpeechRecognition();\n    rec.continuous = true;\n    rec.lang = `${lang}-IN`;\n    rec.interimResults = true;\n\n    // Create a new SpeechGrammarList and add keywords to it\n    const SpeechGrammarList =\n      window.SpeechGrammarList || webkitSpeechGrammarList;\n    const grammarList = new SpeechGrammarList();\n    grammarList.addFromString(\n      \"#JSGF V1.0; grammar keywords; public <keyword> = action | character | scene;\",\n      1\n    );\n    rec.grammars = grammarList;\n\n    rec.onresult = (event) => {\n      let interimTranscription = \"\";\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          setText(transcription + transcript);\n        } else {\n          interimTranscription += transcript;\n        }\n      }\n      // setText(interimTranscription);\n    };\n    if (start) {\n      rec.start();\n    } else {\n      rec.stop();\n    }\n\n    return () => {\n      rec.stop();\n    };\n  }, [start]);\n\n  return (\n    <div>\n      <p>{transcription}</p>\n    </div>\n  );\n};\n\nexport default SpeechToText;\n","import React, { useState } from \"react\";\nimport { saveAs } from \"file-saver\";\n\nconst Download = ({ text }) => {\n  const [fileName, setFileName] = useState(\"screenplay\");\n\n  const handleDownload = () => {\n    const blob = new Blob([text], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    saveAs(blob, `${fileName}.txt`);\n  };\n\n  return (\n    <div>\n      <input\n        placeholder=\"file name\"\n        onChange={(ev) => setFileName(ev.target.value)}\n      />\n      <button onClick={handleDownload}>Download</button>\n    </div>\n  );\n};\nexport default Download;\n","import React, { useState } from \"react\";\n\nconst ImportScript = ({ setText }) => {\n  const [file, setFile] = useState(null);\n\n  const handleFileSelect = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const handleFileRead = () => {\n    const reader = new FileReader();\n    reader.onloadend = (event) => {\n      const text = event.target.result;\n      formatScreenplay(text);\n    };\n    reader.readAsText(file);\n  };\n\n  const formatScreenplay = (text) => {\n    setText(text);\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileSelect} />\n      <button onClick={handleFileRead}>Import screenplay</button>\n    </div>\n  );\n};\nexport default ImportScript;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport Download from \"./Download\";\nimport ImportScript from \"./ImportScript\";\nimport Text from \"./Text\";\nimport \"./styles.css\";\nconst Screenplay = ({ selectedLanguage, setText }) => {\n  const [importedScreenPlay, setImportedScreenPlay] = useState(\"\");\n  const [screenplay, setScreenplay] = useState({\n    title: \"My Great Screenplay\",\n    scenes: []\n  });\n  const [currentScene, setCurrentScene] = useState({\n    heading: \"\",\n    action: \"\",\n    characters: [],\n    dialogue: [],\n    parenthetical: []\n  });\n  const [currentSceneText, setCurrentSceneText] = useState(\"\");\n  const [currentAttribute, setCurrentAttribute] = useState(\"\");\n  const [currentText, setCurrentText] = useState(\"\");\n  const [tempText, setTempText] = useState([]);\n  const [start, setStart] = useState(false);\n  const startWriting = () => {\n    if (start) {\n      handleSubmit();\n    }\n    setStart(!start);\n  };\n  const attrs = [\"heading\", \"action\", \"character\", \"dialogue\", \"parenthetical\"];\n  // useEffect(() => {\n  //   console.log(\"text in attrs\", attrs.includes(text));\n  //   console.log(\"text\", text);\n\n  //   if (text && attrs.includes(text)) {\n  //     setCurrentAttribute(text);\n  //   } else if (text.toLowerCase() === \"next\" || text.includes(\"next\")) {\n  //     handleSubmit();\n  //   } else if (text.toLowerCase() === \"scene\") {\n  //     handleSave();\n  //   } else {\n  //     setCurrentText(text);\n  //   }\n  // }, [text]);\n  // useEffect(() => {\n  //   handleSubmit();\n  // }, [currentAttribute]);\n  const handleAddScene = () => {\n    if (Object.keys(currentScene).length) {\n      const newScreenplay = { ...screenplay };\n      newScreenplay.scenes.push(currentScene);\n      setScreenplay(newScreenplay);\n    }\n    setCurrentScene({\n      heading: \"\",\n      action: \"\",\n      characters: [],\n      dialogue: [],\n      parenthetical: []\n    });\n    setCurrentAttribute(\"\");\n    setCurrentText(\"\");\n  };\n\n  const handleAddAttribute = (attribute) => {\n    setCurrentAttribute(attribute);\n  };\n\n  const handleAddText = (e) => {\n    setCurrentText(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    if (currentAttribute === \"heading\") {\n      let heading = \"INT.\";\n      if (currentText.includes(\"ext\")) {\n        heading = \"EXT.\";\n      }\n      setCurrentScene({ ...currentScene, heading: heading });\n    } else if (currentAttribute === \"action\") {\n      setCurrentScene({\n        ...currentScene,\n        action: currentScene.action + \" \" + currentText\n      });\n    } else if (currentAttribute === \"character\") {\n      setCurrentScene({\n        ...currentScene,\n        characters: [\n          ...currentScene.characters,\n          currentText.toUpperCase() + \":\"\n        ]\n      });\n    } else if (currentAttribute === \"dialogue\") {\n      setCurrentScene({\n        ...currentScene,\n        dialogue: [...currentScene.dialogue, currentText]\n      });\n    } else if (currentAttribute === \"paranthetical\") {\n      setCurrentScene({\n        ...currentScene,\n        parenthetical: [...currentScene.parenthetical, `(${currentText})`]\n      });\n    }\n    setCurrentAttribute(\"\");\n    setCurrentText(\"\");\n    console.log(\"current scene\", currentScene);\n  };\n\n  const handleSave = () => {\n    handleAddScene();\n    setText(formatScreenplay(screenplay));\n    console.log(JSON.stringify(screenplay, null, 2));\n    // you can use fetch or axios to save in server\n  };\n\n  const formatScreenplay = (screenplay) => {\n    let formattedText = \"\";\n    screenplay.scenes.forEach((scene) => {\n      formattedText += scene.heading + \"\\n\";\n      formattedText += \" \".repeat(10) + scene.action + \"\\n\";\n      scene.characters.forEach((character) => {\n        formattedText += \" \".repeat(10) + character + \"\\n\";\n      });\n      scene.dialogue.forEach((dialogue) => {\n        formattedText += \" \".repeat(20) + dialogue + \"\\n\";\n      });\n      scene.parenthetical.forEach((parenthetical) => {\n        formattedText += \" \".repeat(20) + parenthetical + \"\\n\";\n      });\n    });\n\n    return formattedText;\n  };\n  const formattedScreenplay = useMemo(() => {\n    if (importedScreenPlay) {\n      return importedScreenPlay;\n    }\n    return formatScreenplay(screenplay);\n  }, [importedScreenPlay, screenplay]);\n\n  useEffect(() => {\n    const currentSceneText = formatScreenplay({ scenes: [currentScene] });\n    setCurrentSceneText(currentSceneText);\n  }, [currentScene]);\n  const onManualChangeCurrentScene = (ev) => {\n    setCurrentSceneText(ev.target.value);\n  };\n  return (\n    <div>\n      <Text\n        setText={(text) => setCurrentText((ct) => ct + text)}\n        start={start}\n        text={currentText}\n        lang={selectedLanguage}\n      />\n      <Download text={formatScreenplay(screenplay)} />\n      <ImportScript setText={setImportedScreenPlay} />\n      <div className=\"action-items\">\n        {currentAttribute && (\n          <div>\n            <label>{currentAttribute}:</label>\n            <input type=\"text\" onChange={handleAddText} value={currentText} />\n            {/* <button onClick={handleSubmit}>Submit</button> */}\n            <button onClick={startWriting}>{start ? \"Stop\" : \"Start\"}</button>\n          </div>\n        )}\n        <button onClick={() => handleAddAttribute(\"heading\")}>\n          Add Scene Heading\n        </button>\n        <button onClick={() => handleAddAttribute(\"action\")}>Add Action</button>\n        <button onClick={() => handleAddAttribute(\"character\")}>\n          Add Character\n        </button>\n        <button onClick={() => handleAddAttribute(\"dialogue\")}>\n          Add Dialogue\n        </button>\n        <button onClick={() => handleAddAttribute(\"paranthetical\")}>\n          Add Paranthetical\n        </button>\n        <button onClick={handleSave}>Save</button>\n      </div>\n\n      <div>\n        <textarea\n          className=\"screenplay\"\n          rows={10}\n          value={currentSceneText}\n          onChange={onManualChangeCurrentScene}\n        />\n      </div>\n      <div>\n        <textarea\n          className=\"screenplay\"\n          rows={10}\n          value={formattedScreenplay}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Screenplay;\n","import React, { useState } from \"react\";\n\nimport \"./styles.css\";\nimport SelectLanguage from \"./SelectLanguage\";\nimport Text from \"./Text\";\nimport Screenplay from \"./Screenplay\";\nimport ScreenplayFormat from \"./ScreenplayFormat\";\nexport default function App() {\n  const [selectedLanguage, setSelectedLanguage] = useState(\"\");\n  const [text, setText] = useState(\"\");\n\n  const setScript = (newText) => {\n    setText(text + newText);\n  };\n  return (\n    <div className=\"App\">\n      <SelectLanguage\n        selectedLanguage={selectedLanguage}\n        setSelectedLanguage={setSelectedLanguage}\n      />\n\n      <Screenplay setText={setText} selectedLanguage={selectedLanguage} />\n      {/* <ScreenplayFormat text={text} /> */}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}